compile
migrate
let accounts = await web3.eth.getAccounts()
let instance = await VikreyAuction.new(0,90,300,accounts[0])
instance.bid(web3.utils.keccak256(web3.eth.abi.encodeParameters(["uint256","string"],[100,"beneficiary"])),{from:accounts[0],value:110})
web3.eth.getBalance(accounts[1])
instance.bid(web3.utils.keccak256(web3.eth.abi.encodeParameters(["uint256","string"],[100,"first"])),{from:accounts[1],value:110})
web3.eth.getBalance(accounts[1])
instance.bid(web3.utils.keccak256(web3.eth.abi.encodeParameters(["uint256","string"],[150,"first repeat"])),{from:accounts[1],value:160})
web3.eth.getBalance(accounts[1])
web3.eth.getBalance(accounts[2])
instance.bid(web3.utils.keccak256(web3.eth.abi.encodeParameters(["uint256","string"],[50,"second and lower"])),{from:accounts[2],value:150})
web3.eth.getBalance(accounts[2])
web3.eth.getBalance(accounts[3])
instance.bid(web3.utils.keccak256(web3.eth.abi.encodeParameters(["uint256","string"],[110,"third and invalid"])),{from:accounts[3],value:90})
web3.eth.getBalance(accounts[3])
instance.reveal(50,"second and lower",{from:accounts[4]})
web3.eth.getBalance(accounts[2])
instance.reveal(50,"second and lower",{from:accounts[2]})
web3.eth.getBalance(accounts[2])
web3.eth.getBalance(accounts[3])
instance.reveal(110,"third and invalid",{from:accounts[3]})
web3.eth.getBalance(accounts[3])
web3.eth.getBalance(accounts[1])
instance.reveal(100,"first",{from:accounts[1]})
web3.eth.getBalance(accounts[1])
web3.eth.getBalance(accounts[2])
instance.withdraw({from:accounts[2]})
web3.eth.getBalance(accounts[2])
web3.eth.getBalance(accounts[0])
instance.endAuction()
web3.eth.getBalance(accounts[0])
