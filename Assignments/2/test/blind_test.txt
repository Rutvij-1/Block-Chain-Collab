compile
migrate
let accounts = await web3.eth.getAccounts()
let instance = await BlindAuction.deployed()
const EthCrypto = require('eth-crypto');
let identities = [EthCrypto.createIdentity(),EthCrypto.createIdentity(),EthCrypto.createIdentity(),EthCrypto.createIdentity()];
instance.auctionItem("netflix","baap ki company",40,40, {from: accounts[0]})
instance.bid(web3.utils.keccak256(web3.eth.abi.encodeParameters(["uint256","string"],[100,"beneficiary"])),0,identities[0].publicKey,{from:accounts[0],value:310})
web3.eth.getBalance(accounts[1])
instance.bid(web3.utils.keccak256(web3.eth.abi.encodeParameters(["uint256","string"],[100,"first"])),0,identities[1].publicKey,{from:accounts[1],value:210})
web3.eth.getBalance(accounts[1])
instance.bid(web3.utils.keccak256(web3.eth.abi.encodeParameters(["uint256","string"],[150,"first repeat"])),0,identities[1].publicKey,{from:accounts[1],value:360})
web3.eth.getBalance(accounts[1])
web3.eth.getBalance(accounts[2])
instance.bid(web3.utils.keccak256(web3.eth.abi.encodeParameters(["uint256","string"],[50,"second"])),0,identities[2].publicKey,{from:accounts[2],value:150})
web3.eth.getBalance(accounts[2])
web3.eth.getBalance(accounts[3])
instance.bid(web3.utils.keccak256(web3.eth.abi.encodeParameters(["uint256","string"],[110,"third and invalid"])),0,identities[3].publicKey,{from:accounts[3],value:200})
web3.eth.getBalance(accounts[3])
instance.reveal(50,"did not bid",0,{from:accounts[4]})
web3.eth.getBalance(accounts[1])
instance.reveal(100,"first",0,{from:accounts[1]})
web3.eth.getBalance(accounts[1])
web3.eth.getBalance(accounts[2])
instance.reveal(50,"second",0,{from:accounts[2]})
web3.eth.getBalance(accounts[2])
web3.eth.getBalance(accounts[4])
instance.reveal(90,"third and invalid",0,{from:accounts[4]})
web3.eth.getBalance(accounts[4])
web3.eth.getBalance(accounts[2])
y = await instance.auctionEnd(0,{from:accounts[0]})
y.logs
web3.eth.getBalance(accounts[2])
web3.eth.getBalance(accounts[0])
let password = "ye le password"
let encrypted_message = await EthCrypto.encryptWithPublicKey(identities[1].publicKey, password)
let secret_cipher_string = await EthCrypto.cipher.stringify(encrypted_message);
x = await instance.sellItem(0,secret_cipher_string,{from:accounts[0],value:200})
x.logs
web3.eth.getBalance(accounts[0])
web3.eth.getBalance(accounts[1])
let sent_string = await x.logs[0].args.H;
let cipher = EthCrypto.cipher.parse(sent_string);
let sent_item = await EthCrypto.decryptWithPrivateKey(identities[1].privateKey,cipher);
sent_item
instance.confirmDelivery(0,{from:accounts[1]})
web3.eth.getBalance(accounts[0])
web3.eth.getBalance(accounts[1])
instance.auctionItem("prime","doosre baap ki company",30,30, {from: accounts[0]})
instance.getactiveauctions()
instance.getallauctions()
